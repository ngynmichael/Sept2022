package com.michael.serv;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import com.michael.serv.*;

public class EmployeeDAO {

	private static String jdbcURL = "jdbc:mysql://localhost:3306/Sept2022";
	private static String jdbcUsername = "root";
	private static String jdbcPassword = "Wildpho159492";
	private static Connection jdbcConnection;
	private static final String INSERT_EMPLOYEES_SQL = "INSERT INTO employees" + "  (id, firstName, lastName) VALUES "
			+ " (?, ?, ?);";
	private static final String SELECT_EMPLOYEE_BY_ID = "select id, firstName, lastName from employees where id =?";
	private static final String SELECT_ALL_EMPLOYEES = "select * from employees";
	private static final String DELETE_EMPLOYEES_SQL = "delete from employees where id = ?;";
	private static final String UPDATE_EMPLOYEES_SQL = "update employees set id = ?, firstName= ?, lastName = ? where id = ?;";

	public EmployeeDAO() {
	}

	protected static void connect() throws SQLException {
		if (jdbcConnection == null || jdbcConnection.isClosed()) {
			try {
				Class.forName("com.mysql.jdbc.Driver");
			} catch (ClassNotFoundException e) {
				throw new SQLException(e);
			}
			jdbcConnection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
		}
	}

	protected static void disconnect() throws SQLException {
		if (jdbcConnection == null || jdbcConnection.isClosed()) {
			jdbcConnection.close();
		}
	}

	public static void createDB() throws SQLException {
		connect();
		PreparedStatement pst = jdbcConnection.prepareStatement(
				"create table employees(id numeric(10), firstName varchar(255), lastName varchar(255), primary key(empID))");
		if (tableExists(jdbcConnection, "employees") == false) {
			pst.execute();
		}
	}

	public static boolean tableExists(Connection con, String tableName) throws SQLException {
		DatabaseMetaData meta = con.getMetaData();
		ResultSet resultSet = meta.getTables(null, null, tableName, new String[] { "TABLE" });
		return resultSet.next();
	}

	public static int insertUser(Employee employee) throws SQLException {
		int status = 0;
		connect();
		PreparedStatement preparedStatement = jdbcConnection.prepareStatement(INSERT_EMPLOYEES_SQL);
		preparedStatement.setInt(1, employee.getId());
		preparedStatement.setString(2, employee.getFirstName());
		preparedStatement.setString(3, employee.getLastName());
		System.out.println(preparedStatement);
		status = preparedStatement.executeUpdate();
		System.out.println(status);
		return status;
	}

	public static Employee selectUser(int id) throws SQLException{
		Employee employee = new Employee();
		connect();
		PreparedStatement preparedStatement = jdbcConnection.prepareStatement(SELECT_EMPLOYEE_BY_ID);
		preparedStatement.setInt(1, id);
		System.out.println(preparedStatement);
		ResultSet rs = preparedStatement.executeQuery();

		while (rs.next()) {
			int empID = rs.getInt("id");
			String firstName = rs.getString("firstName");
			String lastName = rs.getString("lastName");
			employee = new Employee(empID, firstName, lastName);
		}
		return employee;
	}

	public static List<Employee> selectAllUsers() throws SQLException {

		List<Employee> employee = new ArrayList<>();
		connect();

		PreparedStatement preparedStatement = jdbcConnection.prepareStatement(SELECT_ALL_EMPLOYEES);
		System.out.println(preparedStatement);
		ResultSet rs = preparedStatement.executeQuery();

		while (rs.next()) {
			int empID = rs.getInt("id");
			String firstName = rs.getString("firstName");
			String lastName = rs.getString("lastName");
			employee.add(new Employee(empID, firstName, lastName));
		}

		return employee;
	}

	public static void deleteUser(int id) throws SQLException {
		connect();
		PreparedStatement statement = jdbcConnection.prepareStatement(DELETE_EMPLOYEES_SQL);
		statement.setInt(1, id);
		statement.executeUpdate();
	}

	public static int updateUser(Employee employee) throws SQLException {
		int status = 0;
		connect();
		PreparedStatement statement = jdbcConnection.prepareStatement(UPDATE_EMPLOYEES_SQL);
		statement.setString(1, employee.getFirstName());
		statement.setString(2, employee.getLastName());
		statement.setInt(4, employee.getId());

		status = statement.executeUpdate();
		return status;
	}

}
