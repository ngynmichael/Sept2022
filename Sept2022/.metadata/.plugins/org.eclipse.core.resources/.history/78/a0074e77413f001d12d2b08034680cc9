package com.michael.serv;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

import com.michael.serv.*;

public class EmployeeDAO {
	
	private static String jdbcURL = "jdbc:mysql://localhost:3306/demo?useSSL=false";
    private static String jdbcUsername = "root";
    private static String jdbcPassword = "Wildpho159492";
    private static final String INSERT_EMPLOYEES_SQL = "INSERT INTO employees" + "  (id, firstName, lastName) VALUES " + " (?, ?, ?);";
    private static final String SELECT_EMPLOYEE_BY_ID = "select id, firstName, lastName, from employees where id =?";
    private static final String SELECT_ALL_EMPLOYEES = "select * from employees";
    private static final String DELETE_EMPLOYEES_SQL = "delete from employees where id = ?;";
    private static final String UPDATE_EMPLOYEES_SQL = "update employees set id = ?, firstName= ?, lastName = ? where id = ?;";
    
    public EmployeeDAO() {}
    
    protected static Connection getConnection() {
        Connection connection = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return connection;
    }
    
    public void createDB() throws SQLException {
    	try(Connection connection = getConnection();
    			PreparedStatement pst = 
    					connection.prepareStatement("create table employees(empID numeric(10), firstName varchar(255), lastName varchar(255), primary key(empID))")){
    		if(tableExists(connection, "employees") == false) {
    			pst.execute();
    		}
    	} catch (SQLException e) {

			e.printStackTrace();
		}
    }
    
    public static boolean tableExists(Connection con, String tableName) throws SQLException{
		DatabaseMetaData meta = con.getMetaData();
		ResultSet resultSet = meta.getTables(null,  null, tableName, new String[]{"TABLE"});
		return resultSet.next();
	}	
    
    public static int insertUser(Employee employee) throws SQLException {
        int status = 0;
        try (Connection connection = getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(INSERT_EMPLOYEES_SQL)) {
            preparedStatement.setInt(1, employee.getId());
            preparedStatement.setString(2, employee.getFirstName());
            preparedStatement.setString(3, employee.getLastName());
            System.out.println(preparedStatement);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            printSQLException(e);
        }
        
        return status;
    }
    
    public static Employee selectUser(int id) {
    	Employee employee = null;
        try (Connection connection = getConnection();
            PreparedStatement preparedStatement = connection.prepareStatement(SELECT_EMPLOYEE_BY_ID);) {
            preparedStatement.setInt(1, id);
            System.out.println(preparedStatement);
            ResultSet rs = preparedStatement.executeQuery();

            while (rs.next()) {
                int empID = rs.getInt("id");
                String firstName = rs.getString("firstName");
                String lastName = rs.getString("lastName");
                employee = new Employee(empID, firstName, lastName);
            }
        } catch (SQLException e) {
            printSQLException(e);
        }
        return employee;
    }
    
    public List < Employee > selectAllUsers() {

        List < Employee > employee = new ArrayList < > ();
        try (Connection connection = getConnection();

            PreparedStatement preparedStatement = connection.prepareStatement(SELECT_ALL_EMPLOYEES);) {
            System.out.println(preparedStatement);
            ResultSet rs = preparedStatement.executeQuery();

            while (rs.next()) {
                int empID = rs.getInt("id");
                String firstName = rs.getString("firstName");
                String lastName = rs.getString("lastName");
                employee.add(new Employee(empID, firstName, lastName));
            }
        } catch (SQLException e) {
            printSQLException(e);
        }
        return employee;
    }
    
    public boolean deleteUser(int id) throws SQLException {
        boolean rowDeleted;
        try (Connection connection = getConnection(); PreparedStatement statement = connection.prepareStatement(DELETE_EMPLOYEES_SQL);) {
            statement.setInt(1, id);
            rowDeleted = statement.executeUpdate() > 0;
        }
        return rowDeleted;
    }
    
    public boolean updateUser(Employee employee) throws SQLException {
        boolean rowUpdated;
        try (Connection connection = getConnection(); PreparedStatement statement = connection.prepareStatement(UPDATE_EMPLOYEES_SQL);) {
            statement.setString(1, employee.getFirstName());
            statement.setString(2, employee.getLastName());
            statement.setInt(4, employee.getId());

            rowUpdated = statement.executeUpdate() > 0;
        }
        return rowUpdated;
    }
    
    private static void printSQLException(SQLException ex) {
        for (Throwable e: ex) {
            if (e instanceof SQLException) {
                e.printStackTrace(System.err);
                System.err.println("SQLState: " + ((SQLException) e).getSQLState());
                System.err.println("Error Code: " + ((SQLException) e).getErrorCode());
                System.err.println("Message: " + e.getMessage());
                Throwable t = ex.getCause();
                while (t != null) {
                    System.out.println("Cause: " + t);
                    t = t.getCause();
                }
            }
        }
    }
    
    
}
